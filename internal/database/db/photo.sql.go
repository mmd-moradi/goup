// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: photo.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO photos (user_id, title, description, s3_key)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, title, description, s3_key, created_at, updated_at
`

type CreatePhotoParams struct {
	UserID      pgtype.UUID `json:"user_id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	S3Key       string      `json:"s3_key"`
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (Photo, error) {
	row := q.db.QueryRow(ctx, createPhoto,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.S3Key,
	)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePhoto = `-- name: DeletePhoto :exec
DELETE from photos
WHERE id = $1
`

func (q *Queries) DeletePhoto(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePhoto, id)
	return err
}

const getPhotoByID = `-- name: GetPhotoByID :one
SELECT id, user_id, title, description, s3_key, created_at, updated_at FROM photos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPhotoByID(ctx context.Context, id uuid.UUID) (Photo, error) {
	row := q.db.QueryRow(ctx, getPhotoByID, id)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserPhotos = `-- name: ListUserPhotos :many
SELECT id, user_id, title, description, s3_key, created_at, updated_at FROM photos
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserPhotosParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListUserPhotos(ctx context.Context, arg ListUserPhotosParams) ([]Photo, error) {
	rows, err := q.db.Query(ctx, listUserPhotos, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Photo
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.S3Key,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePhotoDetails = `-- name: UpdatePhotoDetails :one
UPDATE photos
SET title = $1, description = $2, updated_at = NOW()
WHERE id = $3
RETURNING id, user_id, title, description, s3_key, created_at, updated_at
`

type UpdatePhotoDetailsParams struct {
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	ID          uuid.UUID   `json:"id"`
}

func (q *Queries) UpdatePhotoDetails(ctx context.Context, arg UpdatePhotoDetailsParams) (Photo, error) {
	row := q.db.QueryRow(ctx, updatePhotoDetails, arg.Title, arg.Description, arg.ID)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
