// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: photo.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countPhotosByUserID = `-- name: CountPhotosByUserID :one
SELECT COUNT(*) FROM photos
WHERE user_id = $1
`

func (q *Queries) CountPhotosByUserID(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPhotosByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPhoto = `-- name: CreatePhoto :one
INSERT INTO photos (id, user_id, title, description, file_name, file_size, content_type, storage_path, public_URL, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, user_id, title, description, file_name, file_size, content_type, storage_path, public_url, s3_key, created_at, updated_at
`

type CreatePhotoParams struct {
	ID          uuid.UUID          `json:"id"`
	UserID      uuid.UUID          `json:"user_id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	FileName    string             `json:"file_name"`
	FileSize    int64              `json:"file_size"`
	ContentType string             `json:"content_type"`
	StoragePath string             `json:"storage_path"`
	PublicUrl   pgtype.Text        `json:"public_url"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) (Photo, error) {
	row := q.db.QueryRow(ctx, createPhoto,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.FileName,
		arg.FileSize,
		arg.ContentType,
		arg.StoragePath,
		arg.PublicUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.FileName,
		&i.FileSize,
		&i.ContentType,
		&i.StoragePath,
		&i.PublicUrl,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePhoto = `-- name: DeletePhoto :exec
DELETE from photos
WHERE id = $1
`

func (q *Queries) DeletePhoto(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePhoto, id)
	return err
}

const getPhotoByID = `-- name: GetPhotoByID :one
SELECT id, user_id, title, description, file_name, file_size, content_type, storage_path, public_url, s3_key, created_at, updated_at FROM photos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPhotoByID(ctx context.Context, id uuid.UUID) (Photo, error) {
	row := q.db.QueryRow(ctx, getPhotoByID, id)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.FileName,
		&i.FileSize,
		&i.ContentType,
		&i.StoragePath,
		&i.PublicUrl,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPhotosByUserID = `-- name: ListPhotosByUserID :many
SELECT id, user_id, title, description, file_name, file_size, content_type, storage_path, public_url, s3_key, created_at, updated_at FROM photos
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPhotosByUserIDParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListPhotosByUserID(ctx context.Context, arg ListPhotosByUserIDParams) ([]Photo, error) {
	rows, err := q.db.Query(ctx, listPhotosByUserID, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Photo{}
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.FileName,
			&i.FileSize,
			&i.ContentType,
			&i.StoragePath,
			&i.PublicUrl,
			&i.S3Key,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePhoto = `-- name: UpdatePhoto :one
UPDATE photos
SET title = $2,
    description = $3,
    updated_at = $4
WHERE id = $1
RETURNING id, user_id, title, description, file_name, file_size, content_type, storage_path, public_url, s3_key, created_at, updated_at
`

type UpdatePhotoParams struct {
	ID          uuid.UUID          `json:"id"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdatePhoto(ctx context.Context, arg UpdatePhotoParams) (Photo, error) {
	row := q.db.QueryRow(ctx, updatePhoto,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.UpdatedAt,
	)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.FileName,
		&i.FileSize,
		&i.ContentType,
		&i.StoragePath,
		&i.PublicUrl,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePhotoStorageInfo = `-- name: UpdatePhotoStorageInfo :one
UPDATE photos
SET storage_path = $2,
    public_URL = $3,
    updated_at = $4
WHERE id = $1
RETURNING id, user_id, title, description, file_name, file_size, content_type, storage_path, public_url, s3_key, created_at, updated_at
`

type UpdatePhotoStorageInfoParams struct {
	ID          uuid.UUID          `json:"id"`
	StoragePath string             `json:"storage_path"`
	PublicUrl   pgtype.Text        `json:"public_url"`
	UpdatedAt   pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) UpdatePhotoStorageInfo(ctx context.Context, arg UpdatePhotoStorageInfoParams) (Photo, error) {
	row := q.db.QueryRow(ctx, updatePhotoStorageInfo,
		arg.ID,
		arg.StoragePath,
		arg.PublicUrl,
		arg.UpdatedAt,
	)
	var i Photo
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.FileName,
		&i.FileSize,
		&i.ContentType,
		&i.StoragePath,
		&i.PublicUrl,
		&i.S3Key,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
